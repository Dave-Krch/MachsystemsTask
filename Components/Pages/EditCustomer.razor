@page "/customers/edit/{id:int}"

@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations

@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager

<PageTitle>Edit Customer</PageTitle>

<MudStack Row="true">
    <MudText Typo="Typo.h4">Edit Customer</MudText>
    <MudSpacer/>
    <MudIconButton @onclick="() => Cancel()" Icon="@Icons.Material.Filled.ArrowBack" aria-label="delete" Size="Size.Large"></MudIconButton>
</MudStack>

@if (Customer == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{

    <EditForm Model="@Customer" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>

                        <MudTextField @bind-Value="Customer.Name" Label="Name" For="@(() => Customer.Name)" />
                        <MudTextField @bind-Value="Customer.Email" Label="Email" For="@(() => Customer.Email)" />
                        <MudNumericField @bind-Value="Customer.Age" Label="Age" For="@(() => Customer.Age)" />
                        <MudTextField @bind-Value="Customer.City" Label="City" For="@(() => Customer.City)" />
                        <MudTextField @bind-Value="Customer.Country" Label="Country" For="@(() => Customer.Country)" />

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Edit</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="5">
                <MudPaper Class="pa-4 mud-height-full">
                    @if (success)
                    {
                        <MudText Color="Color.Success">Customer edited</MudText>
                    }
                    else
                    {
                        <MudText Color="@Color.Error">
                            <ValidationSummary />
                        </MudText>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code {
    [Parameter] public int id { get; set; }

    private Customer? Customer;

    bool success;


    protected override async Task OnInitializedAsync()
    {
        var DbCustomer = await CustomerService.GetCustomerByIdAsync(id);

        if (DbCustomer != null)
        {
            Customer = new Customer(DbCustomer.Id, DbCustomer.Name, DbCustomer.Email, DbCustomer.Age, DbCustomer.City, DbCustomer.Country);
        }
        else
        {
            NavigationManager.NavigateTo("/customers");
        }
    }

    private void OnInvalidSubmit(EditContext context)
    {
        success = false;
    }

    private async void OnValidSubmit(EditContext context)
    {
        success = true;

        await CustomerService.UpdateCustomerAsync(Customer);

    }

    private void Cancel()
    {      
        NavigationManager.NavigateTo("/customers");
    }
}
