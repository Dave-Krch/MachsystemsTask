@page "/customers"

@rendermode InteractiveServer

@inject ICustomerService CustomerService
@inject NavigationManager NavManager

<MudStack Row="true">
    <MudText Typo="Typo.h4">Customers</MudText>
    <MudSpacer />
    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    <MudIconButton Href="/customers/add" Icon="@Icons.Material.Filled.AddCircle" aria-label="add" Size="Size.Large"></MudIconButton>
</MudStack>


@if (CustomerRecords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudDataGrid Items="@CustomerRecords" Filterable="false" SortMode="@SortMode.None" Groupable="false">
        <Columns>
            <PropertyColumn Property="x => x.Id" />
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.Email" />
            <PropertyColumn Property="x => x.Age" />
            <PropertyColumn Property="x => x.City" />
            <PropertyColumn Property="x => x.Country" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudIconButton @onclick="() => DeleteCustomerAsync(context.Item.Id)" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                        <MudIconButton Href=@("customers/edit/" + context.Item.Id) Icon="@Icons.Material.Filled.Edit" aria-label="edit"></MudIconButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    public record CustomerRecord(int Id, string Name, string Email, int Age, string City, string Country);

    List<CustomerRecord>? CustomerRecords;

    string? searchString = null;

    protected override async Task OnInitializedAsync()
    {
        await UpdateGridAsync();

    }

    private async Task DeleteCustomerAsync(int Id)
    {
        await CustomerService.DeleteCustomerAsync(Id);

        await UpdateGridAsync();
    }

    private async Task UpdateGridAsync()
    {
        var DbCustomers = await CustomerService.GetCustomersAsync();

        CustomerRecords = new List<CustomerRecord>();

        foreach (Customer DbCustomer in DbCustomers)
        {
            if(IsFiltered(DbCustomer))
                CustomerRecords.Add(new CustomerRecord(DbCustomer.Id, DbCustomer.Name, DbCustomer.Email, DbCustomer.Age, DbCustomer.City, DbCustomer.Country));
        }
    }

    private bool IsFiltered(Customer customer)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (customer.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customer.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customer.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customer.Age.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customer.City.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customer.Country.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task OnSearch(string text)
    {
        searchString = text;
        await UpdateGridAsync();    }
}
