@page "/orders/{OrderId:int}"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations

@using MachsystemsTask.Components

@inject IOrderService OrderService
@inject ICustomerService CustomerService
@inject IOrderItemsService OrderItemsService
@inject NavigationManager NavigationManager

<PageTitle>Edit Order</PageTitle>

<MudStack Row="true">
    <MudText Typo="Typo.h4">Edit Order</MudText>
    <MudSpacer />
    <MudIconButton @onclick="() => Cancel()" Icon="@Icons.Material.Filled.ArrowBack" aria-label="delete" Size="Size.Large"></MudIconButton>
</MudStack>

@if (order == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{

    <EditForm Model="@order" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>

                        <MudNumericField @bind-Value="order.CustomerId" Label="CustomerId" For="@(() => order.CustomerId)" />

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Edit</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="5">
                <MudPaper Class="pa-4 mud-height-full">
                    @if (success)
                    {
                        <MudText Color="Color.Success">Order edited</MudText>
                    }
                    else
                    {
                        <MudText Color="@Color.Error">
                            <ValidationSummary />
                        </MudText>
                        @if (!customerExists)
                        {
                            <MudText Color="Color.Error">Customer with given id doesnt exist</MudText>
                        }
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </EditForm>

    <MudStack Row="true">
        <MudText Typo="Typo.h4">Add Order Items</MudText>
        <MudSpacer />
        <MudIconButton Href=@("orders/" + OrderId.ToString() + "/additem") Icon="@Icons.Material.Filled.AddCircle" aria-label="add" Size="Size.Large"></MudIconButton>
    </MudStack>

    @if (ItemRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <MudDataGrid Items="@ItemRecords" Filterable="false" SortMode="@SortMode.None" Groupable="false">
            <Columns>
                <PropertyColumn Property="x => x.Name" />
                <PropertyColumn Property="x => x.Count" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton @onclick="() => AddToOrderItemsAsync(context.Item.Name)" Icon="@Icons.Material.Filled.Add" aria-label="delete"></MudIconButton>
                            <MudIconButton @onclick="() => SubstractFromOrderItemsAsync(context.Item.Name)" Icon="@Icons.Material.Filled.Remove" aria-label="delete"></MudIconButton>
                            <MudIconButton @onclick="() => DeleteOrderItemsAsync(context.Item.Name)" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }
}

@code {
    [Parameter] public int OrderId { get; set; }

    private Order order = new Order(DateTime.Now, 0);

    bool success;
    bool customerExists = true;

    public record ItemRecord(string Name, int Count);

    List<ItemRecord>? ItemRecords;

    protected override async Task OnInitializedAsync()
    {
        await UpdateGridAsync();
    }

    private async Task UpdateGridAsync()
    {
        var DbOrder = await OrderService.GetOrderByIdAsync(OrderId);

        if (DbOrder != null)
        {
            order = new Order(DbOrder.Id, DbOrder.Created, DbOrder.CustomerId, DbOrder.Customer);
        }

        var DbOrderItems = await OrderItemsService.GetItemsForOrderAsync(OrderId);

        ItemRecords = new List<ItemRecord>();

        foreach (OrderItems DbItem in DbOrderItems)
        {
            ItemRecords.Add(new ItemRecord(DbItem.ItemName, DbItem.ItemCount));
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        success = false;

        customerExists = await CustomerService.CustomerExists(order.CustomerId);

        if (!customerExists)
        {
            StateHasChanged();
            return;
        }

        success = true;

        await OrderService.UpdateOrderAsync(order);

        StateHasChanged();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/orders");
    }

    private async Task DeleteOrderItemsAsync(string Name)
    {
        await OrderItemsService.DeleteOrderItemsAsync(OrderId, Name);

        await UpdateGridAsync();
    }

    private async Task AddToOrderItemsAsync(string Name)
    {
        await OrderItemsService.AddOrderItemsAsync(OrderId, Name, 1);

        await UpdateGridAsync();
    }

    private async Task SubstractFromOrderItemsAsync(string Name)
    {
        await OrderItemsService.AddOrderItemsAsync(OrderId, Name, -1);

        await UpdateGridAsync();
    }
}
