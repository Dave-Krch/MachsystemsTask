@inherits LayoutComponentBase

@inject AuthenticationStateProvider AuthenticationStateProvider

@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Text">
            <MudButton Color="Color.Inherit" Href="orders" Edge="Edge.Start">Orders</MudButton>
            <MudButton Color="Color.Inherit" Href="customers" Edge="Edge.Start">Customers</MudButton>
        </MudButtonGroup>

        <MudSpacer/>

        <!--

        @if (!IsUserLoggedIn)
        {
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Text">
                <MudButton Color="Color.Inherit" Href="/Account/Login">Log In</MudButton>
                <MudButton Color="Color.Inherit" Href="/Account/Register">Register</MudButton>
            </MudButtonGroup>
        }
        else
        {
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Text">
                <MudButton Color="Color.Inherit" Href="/Account/Login">LogOut</MudButton>
            </MudButtonGroup>
        }

        -->

    </MudAppBar>

    <MudMainContent>
        @Body
    </MudMainContent>

</MudLayout>
@code {
     /*
       private bool IsUserLoggedIn = false;

       protected override async Task OnInitializedAsync()
       {
       var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

       if (authState.User.Identity == null)
           IsUserLoggedIn = false;
       else
           IsUserLoggedIn = authState.User.Identity.IsAuthenticated;
       }
       */

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Ensure JSInterop is only called after the component is interactive
                await JSRuntime.InvokeVoidAsync("mudBlazorInit");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during JS initialization: {ex.Message}");
            }
        }
    }
}