
@inject IOrderItemsService OrderItemsService

<MudStack Row="true">
    <MudText Typo="Typo.h4">Order Items</MudText>
    <MudSpacer />
    <MudIconButton Href="order/additem" Icon="@Icons.Material.Filled.AddCircle" aria-label="add" Size="Size.Large"></MudIconButton>
</MudStack>

@if (ItemRecords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudDataGrid Items="@ItemRecords" Filterable="false" SortMode="@SortMode.None" Groupable="false">
        <Columns>
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.Count" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudIconButton @onclick="() => AddToOrderItemsAsync(context.Item.Name)" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                        <MudIconButton @onclick="() => SubstractFromOrderItemsAsync(context.Item.Name)" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                        <MudIconButton @onclick="() => DeleteOrderItemsAsync(context.Item.Name)" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    [Parameter]
    public int Id { get; set; }

    public record ItemRecord(string Name, int Count);

    List<ItemRecord>? ItemRecords;

    protected override async Task OnInitializedAsync()
    {
        await UpdateGridAsync();
    }

    private async Task DeleteOrderItemsAsync(string Name)
    {
        await OrderItemsService.DeleteOrderItemsAsync(Id, Name);

        await UpdateGridAsync();
    }

    private async Task AddToOrderItemsAsync(string Name)
    {
        var DbItem = OrderItemsService.AddOrderItemsAsync(Id, Name, 1);

        await UpdateGridAsync();
    }

    private async Task SubstractFromOrderItemsAsync(string Name)
    {
        var DbItem = OrderItemsService.AddOrderItemsAsync(Id, Name, -1);

        await UpdateGridAsync();
    }

    private async Task UpdateGridAsync()
    {
        var DbOrderItems = await OrderItemsService.GetItemsForOrderAsync(Id);

        ItemRecords = new List<ItemRecord>();

        foreach (OrderItems DbItem in DbOrderItems)
        {
            ItemRecords.Add(new ItemRecord(DbItem.ItemName, DbItem.ItemCount));
        }
    }
}
